# Simple example of taxiing as scripted behavior# import Pilot; a=Pilot.Pilot(); a.start()import mathimport calculation as calculationimport timefrom PidController import PidControllerimport Ckpt as Ckptimport Utilities as Utilities_deg2met = 110977.			# meters in one degree latitudeclass LOOP (Ckpt.Ckpt):			# subclass of the class Ckpt in the file Ckpt    def __init__(self):        super().__init__('HW4a', True, False)        self.stayTime = 0        self.angleController = PidController(0.1, 0.001, 0.001)        self.angleController.setPoint(0)        self.eleController = PidController(0.1, 0.001, 0.001)        self.last_altitude = 0        self.lastPit = -20        self.circleCount = 0        self.circleState = 0        self.firstCoord = (0,0)        self.secondCoord = (0,0)        self.firstHeight = 0        self.secondHeight = 0        self.loop = False        self.c = 0        self.rolls = []        self.risemax = -1        self.currise = -1    def PC(self, flyData, radius, sd):        return "OK"    def PLAN(self, flyData, radius, sd):        self.loop = True        self.angleController = PidController(0.1, 0.001, 0.001)        self.angleController.setPoint(0)    def ai(self, flyData, command):        if self.loop:            if self.DO(flyData, command) == "DONE":                self.loop = False        else:            print("roll: ", flyData.roll)            command.throttle = 0.7            if self.last_altitude == 0:                self.altitudeDiff = 0            else:                self.altitudeDiff = flyData.altitude - self.last_altitude            self.last_altitude = flyData.altitude            eleValue = self.eleController.calculatePid(self.altitudeDiff)            if eleValue > 0.1:                eleValue = 0.1            elif eleValue < 0:                eleValue = eleValue - 0.15            command.elevator = eleValue            angleValue = self.angleController.calculateAngelPid(flyData.roll)            angleValue = angleValue            if angleValue > 0.3:                angleValue = 0.3            elif angleValue < -0.3:                angleValue = -0.3            command.aileron = angleValue / 6            if len(self.rolls) < 10:                self.rolls.append(flyData.roll)            else:                can = True                for num in range(9):                    if abs(self.rolls[num] - self.rolls[0]) > 0.01:                        can = False                        break                if can and abs(flyData.roll) < 1:                    self.angleController = PidController(0.1, 0.001, 0.001)                    self.loop = True                    self.last_altitude = 0                    self.lastPit = -20                    self.circleCount = 0                    self.circleState = 0                    self.firstCoord = (0,0)                    self.secondCoord = (0,0)                    self.firstHeight = 0                    self.secondHeight = 0                else:                    self.rolls.append(flyData.roll)                    del self.rolls[0]    def DO(self, flyData, command):        command.throttle = 1        command.elevator = -1        if self.lastPit < 0 and flyData.pitch > 0:            self.firstHeight = flyData.altitude            if self.circleCount > 0:                self.angleController = PidController(0.1, 0.001, 0.001)                self.rolls = []                return "DONE"            #bottom            print("kias: ", flyData.kias)        if self.lastPit > 0 and flyData.pitch < 0:            self.secondHeight = flyData.altitude            #top        if flyData.pitch > 85 or flyData.pitch < -85:            angleValue = self.angleController.calculateAngelPid(0)        elif self.lastPit > flyData.pitch:            if self.circleState == 0:                print("Wdist: ", Utilities.dist(self.firstCoord,self.secondCoord)*110977*3.2808399)                print("Hdist: ", abs(self.firstHeight - self.secondHeight))                self.circleState = 1                self.firstCoord = (flyData.latitude, flyData.longitude)            if flyData.roll > 0:                angleValue = self.angleController.calculateAngelPid(abs(flyData.roll) - 180)            else:                angleValue = self.angleController.calculateAngelPid(180 - abs(flyData.roll))        else:            if self.circleState == 1:                self.secondCoord = (flyData.latitude, flyData.longitude)                self.circleState = 0                self.circleCount = self.circleCount + 1                print("circle: ",self.circleCount)            angleValue = self.angleController.calculateAngelPid(flyData.roll)        self.lastPit = flyData.pitch        command.aileron = angleValue / 5        # if flyData.pitch > 70:        #     command.aileron = -angleValue / 5        # print("rol",flyData.roll)        # print("ali ",command.aileron)        # print("pit ",flyData.pitch)